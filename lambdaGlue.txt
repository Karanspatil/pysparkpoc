### Glue job
import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from pyspark.sql.functions import *
from pyspark.sql.types import *
from pyspark.sql import SparkSession
spark = SparkSession.builder.getOrCreate()
args = getResolvedOptions(sys.argv, ["file","buck"])
file_name=args['file']
bucket_name=args['buck']
input_file_path="s3a://{}/{}".format(bucket_name,file_name)
output="s3a://{}/{}".format(bucket_name,"/output/aslres")
host="jdbc:mysql://karandb.cnhtjdwvatxj.ap-south-1.rds.amazonaws.com:3306/mysqldb"
df = spark.read.format("csv").option("header", True).option("inferSchema", False).load(input_file_path)
#write incremental data to mysql
df.write.mode("append").format("jdbc").options(url=host,user="myuser",password="mypassword",dbtable="asal",driver="com.mysql.jdbc.Driver").save()
#write to s3
df.write.mode("append").format("csv").option("header", "true").save(output)


###Lambda func to trigger above glue job
import boto3

def lambda_handler(event, context):
   # Retrieve File Information
   bucket_name =   event['Records'][0]['s3']['bucket']['name']
   s3_file_name =  event['Records'][0]['s3']['object']['key']
   client = boto3.client('glue')
   response = client.start_job_run(JobName = 'lambdagluepoc', Arguments={"--buck":bucket_name,"--file":s3_file_name})
